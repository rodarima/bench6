MPICC = mpicc
ifdef I_MPI_ROOT
MPICC = mpiicc
endif

NATIVECC = clang

CC = I_MPI_CC=$(NATIVECC) MPICH_CC=$(NATIVECC) OMPI_CC=$(NATIVECC) $(MPICC)
LD = I_MPI_CC=$(NATIVECC) MPICH_CC=$(NATIVECC) OMPI_CC=$(NATIVECC) $(MPICC)

CPPFLAGS = -I. -I$(TAMPI_HOME)/include -I$(TAGASPI_HOME)/include -I$(GASPI_HOME)/include
CFLAGS   = -fompss-2 -Ofast -march=native -ffast-math
LDFLAGS  = -fompss-2 -Ofast -march=native -ffast-math -L$(TAMPI_HOME)/lib -L$(TAMPI_HOME)/lib64 -L$(TAGASPI_HOME)/lib -L$(TAGASPI_HOME)/lib64 -L$(GASPI_HOME)/lib -L$(GASPI_HOME)/lib64
LDLIBS   = -lm -ltampi-c -ltagaspi -lGPI2

EXEC = miniAMR.x

OBJS = block.o check_sum.o comm_block.o comm.o comm_parent.o comm_refine.o \
       comm_util.o def.o driver.o init.o main.o move.o pack.o plot.o profile.o \
       rcb.o refine.o stencil.o kernel.o util.o

$(EXEC): $(OBJS)
	$(LD) $(LDFLAGS) -o $@ $(OBJS) $(LDLIBS)

.c.o:
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $<

clean:
	rm -rf *.o miniAMR.x

block.o: block.h proto.h comm.h timer.h

check_sum.o: block.h comm.h proto.h timer.h

comm_block.o: block.h comm.h proto.h

comm.o: block.h comm.h proto.h timer.h

comm_parent.o: block.h comm.h proto.h

comm_refine.o: block.h comm.h proto.h

comm_util.o: block.h comm.h proto.h

def.o: block.h comm.h timer.h

driver.o: block.h comm.h proto.h timer.h

init.o: block.h proto.h comm.h

main.o: block.h comm.h proto.h param.h timer.h

move.o: block.h comm.h proto.h

pack.o: block.h comm.h proto.h

plot.o: block.h comm.h proto.h

profile.o: block.h comm.h proto.h timer.h

rcb.o: block.h comm.h proto.h timer.h

refine.o: block.h comm.h proto.h timer.h

stencil.o: block.h comm.h proto.h

kernel.o: block.h comm.h proto.h

util.o: block.h comm.h proto.h timer.h
